diff --git a/src/core/nginx.h b/src/core/nginx.h
index e98630c..479754d 100644
--- a/src/core/nginx.h
+++ b/src/core/nginx.h
@@ -11,7 +11,7 @@
 
 #define nginx_version      1015006
 #define NGINX_VERSION      "1.15.6"
-#define NGINX_VER          "openresty/" NGINX_VERSION ".1rc0"
+#define NGINX_VER          "ArvanCloud(nginx)/" NGINX_VERSION
 
 #ifdef NGX_BUILD
 #define NGINX_VER_BUILD    NGINX_VER " (" NGX_BUILD ")"
@@ -20,6 +20,7 @@
 #endif
 
 #define NGINX_VAR          "NGINX"
+#define NGINX_VAR          "ARVANCLOUD(NGINX)"
 #define NGX_OLDPID_EXT     ".oldbin"
 
 
diff --git a/src/http/modules/ngx_http_fastcgi_module.c b/src/http/modules/ngx_http_fastcgi_module.c
index 2be0672..5dd0803 100644
--- a/src/http/modules/ngx_http_fastcgi_module.c
+++ b/src/http/modules/ngx_http_fastcgi_module.c
@@ -551,10 +551,10 @@ static ngx_command_t  ngx_http_fastcgi_commands[] = {
 
     { ngx_string("fastcgi_ignore_headers"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
-      ngx_conf_set_bitmask_slot,
+      ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_fastcgi_loc_conf_t, upstream.ignore_headers),
-      &ngx_http_upstream_ignore_headers_masks },
+      offsetof(ngx_http_fastcgi_loc_conf_t, upstream.ar_ignore_headers),
+      NULL },
 
     { ngx_string("fastcgi_catch_stderr"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
@@ -2950,10 +2950,9 @@ ngx_http_fastcgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     }
 
 
-    ngx_conf_merge_bitmask_value(conf->upstream.ignore_headers,
-                              prev->upstream.ignore_headers,
-                              NGX_CONF_BITMASK_SET);
-
+    if (conf->upstream.ar_ignore_headers == NULL) {
+    	conf->upstream.ar_ignore_headers = prev->upstream.ar_ignore_headers;
+    }
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                               prev->upstream.next_upstream,
diff --git a/src/http/modules/ngx_http_proxy_module.c b/src/http/modules/ngx_http_proxy_module.c
index 7d2526a..5e67a10 100644
--- a/src/http/modules/ngx_http_proxy_module.c
+++ b/src/http/modules/ngx_http_proxy_module.c
@@ -510,10 +510,10 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
 
     { ngx_string("proxy_cache_use_stale"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
-      ngx_conf_set_bitmask_slot,
+	  ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_use_stale),
-      &ngx_http_proxy_next_upstream_masks },
+      offsetof(ngx_http_proxy_loc_conf_t,upstream.ar_cache_use_stale),
+      NULL},
 
     { ngx_string("proxy_cache_methods"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
@@ -624,10 +624,10 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
 
     { ngx_string("proxy_ignore_headers"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
-      ngx_conf_set_bitmask_slot,
+      ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_proxy_loc_conf_t, upstream.ignore_headers),
-      &ngx_http_upstream_ignore_headers_masks },
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.ar_ignore_headers),
+      NULL},
 
     { ngx_string("proxy_http_version"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
@@ -3077,10 +3077,9 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     }
 
 
-    ngx_conf_merge_bitmask_value(conf->upstream.ignore_headers,
-                              prev->upstream.ignore_headers,
-                              NGX_CONF_BITMASK_SET);
-
+    if (conf->upstream.ar_ignore_headers == NULL) {
+    	conf->upstream.ar_ignore_headers = prev->upstream.ar_ignore_headers;
+    }
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                               prev->upstream.next_upstream,
@@ -3136,15 +3135,6 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                               (NGX_CONF_BITMASK_SET
                                |NGX_HTTP_UPSTREAM_FT_OFF));
 
-    if (conf->upstream.cache_use_stale & NGX_HTTP_UPSTREAM_FT_OFF) {
-        conf->upstream.cache_use_stale = NGX_CONF_BITMASK_SET
-                                         |NGX_HTTP_UPSTREAM_FT_OFF;
-    }
-
-    if (conf->upstream.cache_use_stale & NGX_HTTP_UPSTREAM_FT_ERROR) {
-        conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
-    }
-
     if (conf->upstream.cache_methods == 0) {
         conf->upstream.cache_methods = prev->upstream.cache_methods;
     }
diff --git a/src/http/modules/ngx_http_scgi_module.c b/src/http/modules/ngx_http_scgi_module.c
index 7216f78..e9d7def 100644
--- a/src/http/modules/ngx_http_scgi_module.c
+++ b/src/http/modules/ngx_http_scgi_module.c
@@ -403,7 +403,7 @@ static ngx_command_t ngx_http_scgi_commands[] = {
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
       ngx_conf_set_bitmask_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_scgi_loc_conf_t, upstream.ignore_headers),
+      offsetof(ngx_http_scgi_loc_conf_t, upstream.ar_ignore_headers),
       &ngx_http_upstream_ignore_headers_masks },
 
       ngx_null_command
@@ -1424,10 +1424,9 @@ ngx_http_scgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     }
 
 
-    ngx_conf_merge_bitmask_value(conf->upstream.ignore_headers,
-                                 prev->upstream.ignore_headers,
-                                 NGX_CONF_BITMASK_SET);
-
+    if (conf->upstream.ar_ignore_headers == NULL) {
+    	conf->upstream.ar_ignore_headers = prev->upstream.ar_ignore_headers;
+    }
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                                  prev->upstream.next_upstream,
diff --git a/src/http/modules/ngx_http_slice_filter_module.c b/src/http/modules/ngx_http_slice_filter_module.c
index c1edbca..1610a4a 100644
--- a/src/http/modules/ngx_http_slice_filter_module.c
+++ b/src/http/modules/ngx_http_slice_filter_module.c
@@ -12,6 +12,7 @@
 
 typedef struct {
     size_t               size;
+    ngx_http_complex_value_t *size_cv;
 } ngx_http_slice_loc_conf_t;
 
 
@@ -46,15 +47,16 @@ static char *ngx_http_slice_merge_loc_conf(ngx_conf_t *cf, void *parent,
     void *child);
 static ngx_int_t ngx_http_slice_add_variables(ngx_conf_t *cf);
 static ngx_int_t ngx_http_slice_init(ngx_conf_t *cf);
-
+static size_t ngx_read_size_from_slice_conf(ngx_http_request_t *r,
+    ngx_http_slice_loc_conf_t *slcf);
 
 static ngx_command_t  ngx_http_slice_filter_commands[] = {
 
     { ngx_string("slice"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
-      ngx_conf_set_size_slot,
+      ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_slice_loc_conf_t, size),
+      offsetof(ngx_http_slice_loc_conf_t, size_cv),
       NULL },
 
       ngx_null_command
@@ -97,6 +99,21 @@ static ngx_str_t  ngx_http_slice_range_name = ngx_string("slice_range");
 static ngx_http_output_header_filter_pt  ngx_http_next_header_filter;
 static ngx_http_output_body_filter_pt    ngx_http_next_body_filter;
 
+static size_t
+ngx_read_size_from_slice_conf(ngx_http_request_t *r, ngx_http_slice_loc_conf_t *slcf)
+{
+    ngx_str_t res;
+    size_t size;
+    if (ngx_http_complex_value(r, slcf->size_cv, &res) != NGX_OK) {
+        return 0;
+    }
+    size = ngx_parse_size(&res);
+    if (size == (size_t) NGX_ERROR) {
+        return 0;
+    }
+    return size;
+}
+
 
 static ngx_int_t
 ngx_http_slice_header_filter(ngx_http_request_t *r)
@@ -107,6 +124,7 @@ ngx_http_slice_header_filter(ngx_http_request_t *r)
     ngx_http_slice_ctx_t            *ctx;
     ngx_http_slice_loc_conf_t       *slcf;
     ngx_http_slice_content_range_t   cr;
+    size_t                           slcf_size;
 
     ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);
     if (ctx == NULL) {
@@ -160,8 +178,9 @@ ngx_http_slice_header_filter(ngx_http_request_t *r)
                    cr.start, cr.end, cr.complete_length);
 
     slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
+    slcf_size = ngx_read_size_from_slice_conf(r, slcf);
 
-    end = ngx_min(cr.start + (off_t) slcf->size, cr.complete_length);
+    end = ngx_min(cr.start + (off_t) slcf_size, cr.complete_length);
 
     if (cr.start != ctx->start || cr.end != end) {
         ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
@@ -193,9 +212,9 @@ ngx_http_slice_header_filter(ngx_http_request_t *r)
     r->preserve_body = 1;
 
     if (r->headers_out.status == NGX_HTTP_PARTIAL_CONTENT) {
-        if (ctx->start + (off_t) slcf->size <= r->headers_out.content_offset) {
-            ctx->start = slcf->size
-                         * (r->headers_out.content_offset / slcf->size);
+        if (ctx->start + (off_t) slcf_size <= r->headers_out.content_offset) {
+            ctx->start = slcf_size
+                         * (r->headers_out.content_offset / slcf_size);
         }
 
         ctx->end = r->headers_out.content_offset
@@ -216,6 +235,7 @@ ngx_http_slice_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
     ngx_chain_t                *cl;
     ngx_http_slice_ctx_t       *ctx;
     ngx_http_slice_loc_conf_t  *slcf;
+    size_t                      slcf_size;
 
     ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);
 
@@ -268,9 +288,10 @@ ngx_http_slice_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
     ngx_http_set_ctx(ctx->sr, ctx, ngx_http_slice_filter_module);
 
     slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
+    slcf_size = ngx_read_size_from_slice_conf(r, slcf);
 
     ctx->range.len = ngx_sprintf(ctx->range.data, "bytes=%O-%O", ctx->start,
-                                 ctx->start + (off_t) slcf->size - 1)
+                                 ctx->start + (off_t) slcf_size - 1)
                      - ctx->range.data;
 
     ctx->active = 0;
@@ -393,6 +414,7 @@ ngx_http_slice_range_variable(ngx_http_request_t *r,
     u_char                     *p;
     ngx_http_slice_ctx_t       *ctx;
     ngx_http_slice_loc_conf_t  *slcf;
+    size_t                      slcf_size;
 
     ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);
 
@@ -403,8 +425,9 @@ ngx_http_slice_range_variable(ngx_http_request_t *r,
         }
 
         slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);
+        slcf_size = ngx_read_size_from_slice_conf(r, slcf);
 
-        if (slcf->size == 0) {
+        if (slcf_size == 0) {
             v->not_found = 1;
             return NGX_OK;
         }
@@ -421,11 +444,11 @@ ngx_http_slice_range_variable(ngx_http_request_t *r,
             return NGX_ERROR;
         }
 
-        ctx->start = slcf->size * (ngx_http_slice_get_start(r) / slcf->size);
+        ctx->start = slcf_size * (ngx_http_slice_get_start(r) / slcf_size);
 
         ctx->range.data = p;
         ctx->range.len = ngx_sprintf(p, "bytes=%O-%O", ctx->start,
-                                     ctx->start + (off_t) slcf->size - 1)
+                                     ctx->start + (off_t) slcf_size - 1)
                          - p;
     }
 
@@ -498,7 +521,7 @@ ngx_http_slice_create_loc_conf(ngx_conf_t *cf)
         return NULL;
     }
 
-    slcf->size = NGX_CONF_UNSET_SIZE;
+    slcf->size_cv = NULL;
 
     return slcf;
 }
@@ -510,7 +533,7 @@ ngx_http_slice_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_http_slice_loc_conf_t *prev = parent;
     ngx_http_slice_loc_conf_t *conf = child;
 
-    ngx_conf_merge_size_value(conf->size, prev->size, 0);
+    ngx_conf_merge_ptr_value(conf->size_cv, prev->size_cv, NULL);
 
     return NGX_CONF_OK;
 }
diff --git a/src/http/modules/ngx_http_uwsgi_module.c b/src/http/modules/ngx_http_uwsgi_module.c
index 8b09110..94f5934 100644
--- a/src/http/modules/ngx_http_uwsgi_module.c
+++ b/src/http/modules/ngx_http_uwsgi_module.c
@@ -469,10 +469,10 @@ static ngx_command_t ngx_http_uwsgi_commands[] = {
 
     { ngx_string("uwsgi_ignore_headers"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
-      ngx_conf_set_bitmask_slot,
+      ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_uwsgi_loc_conf_t, upstream.ignore_headers),
-      &ngx_http_upstream_ignore_headers_masks },
+      offsetof(ngx_http_uwsgi_loc_conf_t, upstream.ar_ignore_headers),
+      NULL },
 
 #if (NGX_HTTP_SSL)
 
@@ -1645,10 +1645,9 @@ ngx_http_uwsgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     }
 
 
-    ngx_conf_merge_bitmask_value(conf->upstream.ignore_headers,
-                                 prev->upstream.ignore_headers,
-                                 NGX_CONF_BITMASK_SET);
-
+    if (conf->upstream.ar_ignore_headers == NULL) {
+    	conf->upstream.ar_ignore_headers = prev->upstream.ar_ignore_headers;
+    }
 
     ngx_conf_merge_bitmask_value(conf->upstream.next_upstream,
                                  prev->upstream.next_upstream,
diff --git a/src/http/ngx_http_cache.h b/src/http/ngx_http_cache.h
index f9e9664..9d7890e 100644
--- a/src/http/ngx_http_cache.h
+++ b/src/http/ngx_http_cache.h
@@ -32,7 +32,7 @@
 
 typedef struct {
     ngx_uint_t                       status;
-    time_t                           valid;
+    ngx_http_complex_value_t         *valid;
 } ngx_http_cache_valid_t;
 
 
@@ -159,7 +159,9 @@ struct ngx_http_file_cache_s {
     ngx_slab_pool_t                 *shpool;
 
     ngx_path_t                      *path;
-
+    
+    ngx_str_t                        ar_path;
+    
     off_t                            max_size;
     size_t                           bsize;
 
@@ -193,7 +195,7 @@ void ngx_http_file_cache_update(ngx_http_request_t *r, ngx_temp_file_t *tf);
 void ngx_http_file_cache_update_header(ngx_http_request_t *r);
 ngx_int_t ngx_http_cache_send(ngx_http_request_t *);
 void ngx_http_file_cache_free(ngx_http_cache_t *c, ngx_temp_file_t *tf);
-time_t ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status);
+time_t ngx_http_file_cache_valid(ngx_http_request_t *r, ngx_array_t *cache_valid, ngx_uint_t status);
 
 char *ngx_http_file_cache_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
diff --git a/src/http/ngx_http_file_cache.c b/src/http/ngx_http_file_cache.c
index ecdf11e..d3acfe1 100644
--- a/src/http/ngx_http_file_cache.c
+++ b/src/http/ngx_http_file_cache.c
@@ -283,6 +283,25 @@ ngx_http_file_cache_open(ngx_http_request_t *r)
     }
 
     cache = c->file_cache;
+ 
+
+    //arvan change cache path for purge solution
+    ngx_str_t ar_original_path_name = cache->path->name;
+    if(cache->ar_path.len == 0){
+    	cache->ar_path = ar_original_path_name;
+    }
+    ngx_str_t				  ar_fake_path_name;
+    ngx_str_t host = r->headers_in.server;
+    ar_fake_path_name.len = cache->ar_path.len + host.len + 1;
+    ar_fake_path_name.data = ngx_pcalloc(r->pool, cache->ar_path.len + host.len + 1);
+    if (ar_fake_path_name.data == NULL) {
+        return NGX_HTTP_INTERNAL_SERVER_ERROR;
+    }
+    ngx_memcpy(ngx_cpymem(ngx_cpymem(ar_fake_path_name.data, cache->ar_path.data,cache->ar_path.len), "/", 1),
+    		host.data, host.len);
+    cache->path->name = ar_fake_path_name;
+
+
 
     if (c->node == NULL) {
         cln = ngx_pool_cleanup_add(r->pool, 0);
@@ -2274,7 +2293,7 @@ ngx_http_file_cache_set_watermark(ngx_http_file_cache_t *cache)
 
 
 time_t
-ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status)
+ngx_http_file_cache_valid(ngx_http_request_t *r, ngx_array_t *cache_valid, ngx_uint_t status)
 {
     ngx_uint_t               i;
     ngx_http_cache_valid_t  *valid;
@@ -2286,12 +2305,33 @@ ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status)
     valid = cache_valid->elts;
     for (i = 0; i < cache_valid->nelts; i++) {
 
+    	ngx_str_t                 unparsed_valid_time;
+    	time_t                    valid_time;
+
         if (valid[i].status == 0) {
-            return valid[i].valid;
+            if (ngx_http_complex_value(r, valid[i].valid, &unparsed_valid_time) != NGX_OK) {
+                return 0;
+            }
+            valid_time = ngx_parse_time(&unparsed_valid_time, 1);
+            if (valid_time == (time_t) NGX_ERROR) {
+                ngx_log_error(NGX_LOG_EMERG, r->connection->log, 0,
+                                   "invalid time value \"%V\"", &unparsed_valid_time);
+                return 0;
+            }
+            return valid_time;
         }
 
         if (valid[i].status == status) {
-            return valid[i].valid;
+            if (ngx_http_complex_value(r, valid[i].valid, &unparsed_valid_time) != NGX_OK) {
+                return 0;
+            }
+            valid_time = ngx_parse_time(&unparsed_valid_time, 1);
+            if (valid_time == (time_t) NGX_ERROR) {
+                ngx_log_error(NGX_LOG_EMERG, r->connection->log, 0,
+                                   "invalid time value \"%V\"", &unparsed_valid_time);
+                return 0;
+            }
+            return valid_time;
         }
     }
 
@@ -2627,14 +2667,12 @@ ngx_http_file_cache_valid_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
 {
     char  *p = conf;
 
-    time_t                    valid;
-    ngx_str_t                *value;
-    ngx_int_t                 status;
-    ngx_uint_t                i, n;
-    ngx_array_t             **a;
-    ngx_http_cache_valid_t   *v;
-    static ngx_uint_t         statuses[] = { 200, 301, 302 };
-
+    ngx_str_t                   *value;
+    ngx_uint_t                  i, n, status;
+    ngx_array_t                 **a;
+    ngx_http_cache_valid_t      *v;
+    static ngx_uint_t           statuses[] = { 200, 301, 302 };
+ 
     a = (ngx_array_t **) (p + cmd->offset);
 
     if (*a == NGX_CONF_UNSET_PTR) {
@@ -2647,52 +2685,51 @@ ngx_http_file_cache_valid_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
     value = cf->args->elts;
     n = cf->args->nelts - 1;
 
-    valid = ngx_parse_time(&value[n], 1);
-    if (valid == (time_t) NGX_ERROR) {
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                           "invalid time value \"%V\"", &value[n]);
-        return NGX_CONF_ERROR;
-    }
+   ngx_http_complex_value_t           *valid_cv;
+   ngx_http_compile_complex_value_t   valid_ccv;
+	valid_cv = malloc(sizeof(ngx_http_complex_value_t));
+	ngx_memzero(&valid_ccv, sizeof(ngx_http_compile_complex_value_t));
+	valid_ccv.cf = cf;
+	valid_ccv.value = &value[n];
+	valid_ccv.complex_value = valid_cv;
 
-    if (n == 1) {
+	if (ngx_http_compile_complex_value(&valid_ccv) != NGX_OK) {
+		return NGX_CONF_ERROR;
+	}
 
-        for (i = 0; i < 3; i++) {
-            v = ngx_array_push(*a);
-            if (v == NULL) {
-                return NGX_CONF_ERROR;
-            }
+	if (n == 1) {
 
-            v->status = statuses[i];
-            v->valid = valid;
+		for (i = 0; i < 3; i++) {
+			v = ngx_array_push(*a);
+			if (v == NULL) {
+				return NGX_CONF_ERROR;
+			}
+			v->status  = statuses[i];
+			v->valid   = valid_cv;
         }
-
-        return NGX_CONF_OK;
+		return NGX_CONF_OK;
     }
 
-    for (i = 1; i < n; i++) {
-
-        if (ngx_strcmp(value[i].data, "any") == 0) {
-
+	for (i = 1; i < n; i++) {
+		if (ngx_strcmp(value[i].data, "any") == 0) {
             status = 0;
-
         } else {
-
-            status = ngx_atoi(value[i].data, value[i].len);
-            if (status < 100 || status > 599) {
-                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                                   "invalid status \"%V\"", &value[i]);
-                return NGX_CONF_ERROR;
-            }
-        }
-
-        v = ngx_array_push(*a);
-        if (v == NULL) {
-            return NGX_CONF_ERROR;
-        }
-
-        v->status = status;
-        v->valid = valid;
-    }
+			status = ngx_atoi(value[i].data, value[i].len);
+			if (status < 100) {
+				ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+								   "invalid status \"%V\"", &value[i]);
+				return NGX_CONF_ERROR;
+			}
+		}
+
+		v = ngx_array_push(*a);
+		if (v == NULL) {
+			return NGX_CONF_ERROR;
+		}
+
+		v->status = status;
+		v->valid = valid_cv;
+	}
 
     return NGX_CONF_OK;
 }
diff --git a/src/http/ngx_http_header_filter_module.c b/src/http/ngx_http_header_filter_module.c
index ca13f2a..d536fb3 100644
--- a/src/http/ngx_http_header_filter_module.c
+++ b/src/http/ngx_http_header_filter_module.c
@@ -46,7 +46,7 @@ ngx_module_t  ngx_http_header_filter_module = {
 };
 
 
-static u_char ngx_http_server_string[] = "Server: openresty" CRLF;
+static char ngx_http_server_string[] = "Server: ArvanCloud" CRLF;
 static u_char ngx_http_server_full_string[] = "Server: " NGINX_VER CRLF;
 static u_char ngx_http_server_build_string[] = "Server: " NGINX_VER_BUILD CRLF;
 
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index 6bfff96..0cd0cc3 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -395,6 +395,8 @@ struct ngx_http_request_s {
     ngx_http_headers_in_t             headers_in;
     ngx_http_headers_out_t            headers_out;
 
+    ngx_uint_t                        ar_ignore_headers_mask;
+
     ngx_http_request_body_t          *request_body;
 
     time_t                            lingering_time;
diff --git a/src/http/ngx_http_special_response.c b/src/http/ngx_http_special_response.c
index 4b8bbf5..544aec5 100644
--- a/src/http/ngx_http_special_response.c
+++ b/src/http/ngx_http_special_response.c
@@ -19,7 +19,7 @@ static ngx_int_t ngx_http_send_refresh(ngx_http_request_t *r);
 
 
 static u_char ngx_http_error_full_tail[] =
-"<hr><center>" NGINX_VER "</center>" CRLF
+"</div>" CRLF
 "</body>" CRLF
 "</html>" CRLF
 ;
@@ -33,7 +33,7 @@ static u_char ngx_http_error_build_tail[] =
 
 
 static u_char ngx_http_error_tail[] =
-"<hr><center>openresty</center>" CRLF
+"</div>" CRLF
 "</body>" CRLF
 "</html>" CRLF
 ;
@@ -58,34 +58,42 @@ static u_char ngx_http_msie_refresh_tail[] =
 
 
 static char ngx_http_error_301_page[] =
-"<html>" CRLF
-"<head><title>301 Moved Permanently</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>301 Moved Permanently</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Moved Permanently (301)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Moved Permanently (301)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_302_page[] =
-"<html>" CRLF
-"<head><title>302 Found</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>302 Found</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Found (302)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Found (302)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_303_page[] =
-"<html>" CRLF
-"<head><title>303 See Other</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>303 See Other</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>See Other (303)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>See Other (303)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_307_page[] =
-"<html>" CRLF
-"<head><title>307 Temporary Redirect</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>307 Temporary Redirect</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Temporary Redirect (307)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Temporary Redirect (307)</h3>" CRLF
 ;
 
 
@@ -98,138 +106,180 @@ static char ngx_http_error_308_page[] =
 
 
 static char ngx_http_error_400_page[] =
-"<html>" CRLF
-"<head><title>400 Bad Request</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>400 Bad Request</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Bad Request (400)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Bad Request (400)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_401_page[] =
-"<html>" CRLF
-"<head><title>401 Authorization Required</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>401 Authorization Required</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Authorization Required (401)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Authorization Required (401)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_402_page[] =
-"<html>" CRLF
-"<head><title>402 Payment Required</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>402 Payment Required</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Payment Required (402)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Payment Required (402)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_403_page[] =
-"<html>" CRLF
-"<head><title>403 Forbidden</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>403 Forbidden</h1></center>" CRLF
+"<!doctype html><html><head>" CRLF
+"<title>403 Waf protected</title>" CRLF
+"<meta charset=\"UTF-8\">"
+"<link href=\"https://www.arvancloud.com/assets/errorlog/style.css\" rel=\"stylesheet\">" CRLF
+"</head>" CRLF
+"<body>" CRLF
+"<div class=\"wrapper clearfix\">" CRLF
+"<img src=\"https://www.arvancloud.com/assets/errorlog/ar-logo.png\" alt=\"logo\">" CRLF
+"<h1>عدم دسترسی</h1>" CRLF
+"<h2>درخواست شما مسدود شده است.</h2>" CRLF
+"<p>قدرت گرفته از <a href=\"https://www.arvancloud.com/\">ابر آروان</a></p>" CRLF
+"</div>" CRLF
+"</body>" CRLF
+"</html>" CRLF
 ;
 
 
 static char ngx_http_error_404_page[] =
-"<html>" CRLF
-"<head><title>404 Not Found</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>404 Not Found</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Not Found (404)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Not Found (404)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_405_page[] =
-"<html>" CRLF
-"<head><title>405 Not Allowed</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>405 Not Allowed</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Not Allowed (405)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Not Allowed (405)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_406_page[] =
-"<html>" CRLF
-"<head><title>406 Not Acceptable</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>406 Not Acceptable</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Not Acceptable (406)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Not Acceptable (406)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_408_page[] =
-"<html>" CRLF
-"<head><title>408 Request Time-out</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>408 Request Time-out</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Request Time-out (408)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Request Time-out (408)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_409_page[] =
-"<html>" CRLF
-"<head><title>409 Conflict</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>409 Conflict</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Conflict (409)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Conflict (409)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_410_page[] =
-"<html>" CRLF
-"<head><title>410 Gone</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>410 Gone</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Gone (410)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Gone (410)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_411_page[] =
-"<html>" CRLF
-"<head><title>411 Length Required</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>411 Length Required</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Length Required (411)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Length Required (411)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_412_page[] =
-"<html>" CRLF
-"<head><title>412 Precondition Failed</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>412 Precondition Failed</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Precondition Failed (412)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Precondition Failed (412)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_413_page[] =
-"<html>" CRLF
-"<head><title>413 Request Entity Too Large</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>413 Request Entity Too Large</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Request Entity Too Large (413)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Request Entity Too Large (413)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_414_page[] =
-"<html>" CRLF
-"<head><title>414 Request-URI Too Large</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>414 Request-URI Too Large</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Request-URI Too Large (414)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Request-URI Too Large (414)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_415_page[] =
-"<html>" CRLF
-"<head><title>415 Unsupported Media Type</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>415 Unsupported Media Type</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Unsupported Media Type (415)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Unsupported Media Type (415)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_416_page[] =
-"<html>" CRLF
-"<head><title>416 Requested Range Not Satisfiable</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>416 Requested Range Not Satisfiable</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Requested Range Not Satisfiable (416)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Requested Range Not Satisfiable (416)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_421_page[] =
-"<html>" CRLF
-"<head><title>421 Misdirected Request</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>421 Misdirected Request</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Too Many Concurrent SMTP Connections (421)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Too Many Concurrent SMTP Connections (421)</h3>" CRLF
 ;
 
 
@@ -242,82 +292,96 @@ static char ngx_http_error_429_page[] =
 
 
 static char ngx_http_error_494_page[] =
-"<html>" CRLF
-"<head><title>400 Request Header Or Cookie Too Large</title></head>"
-CRLF
-"<body>" CRLF
-"<center><h1>400 Bad Request</h1></center>" CRLF
-"<center>Request Header Or Cookie Too Large</center>" CRLF
+"<html><head>" CRLF
+"<title>Request Header Or Cookie Too Large (400)</title></head>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Bad Request (400)</h3>" CRLF
+"<h3>Request Header Or Cookie Too Large</h3>" CRLF
 ;
 
 
 static char ngx_http_error_495_page[] =
-"<html>" CRLF
-"<head><title>400 The SSL certificate error</title></head>"
-CRLF
-"<body>" CRLF
-"<center><h1>400 Bad Request</h1></center>" CRLF
-"<center>The SSL certificate error</center>" CRLF
+"<html><head>" CRLF
+"<title>The SSL certificate error (400)</title></head>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Bad Request (400)</h3>" CRLF
+"<h3>The SSL certificate error</h3>" CRLF
 ;
 
 
 static char ngx_http_error_496_page[] =
-"<html>" CRLF
-"<head><title>400 No required SSL certificate was sent</title></head>"
-CRLF
-"<body>" CRLF
-"<center><h1>400 Bad Request</h1></center>" CRLF
-"<center>No required SSL certificate was sent</center>" CRLF
+"<html><head>" CRLF
+"<title>No required SSL certificate was sent (400)</title></head>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Bad Request (400)</h3>" CRLF
+"<h3>No required SSL certificate was sent</h3>" CRLF
 ;
 
 
 static char ngx_http_error_497_page[] =
-"<html>" CRLF
-"<head><title>400 The plain HTTP request was sent to HTTPS port</title></head>"
-CRLF
-"<body>" CRLF
-"<center><h1>400 Bad Request</h1></center>" CRLF
-"<center>The plain HTTP request was sent to HTTPS port</center>" CRLF
+"<html><head>" CRLF
+"<title>The plain HTTP request was sent to HTTPS port (400)</title></head>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Bad Request (400)</h3>" CRLF
+"<h3>The plain HTTP request was sent to HTTPS port</h3>" CRLF
 ;
 
 
 static char ngx_http_error_500_page[] =
-"<html>" CRLF
-"<head><title>500 Internal Server Error</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>500 Internal Server Error</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Internal Server Error (500)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Internal Server Error (500)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_501_page[] =
-"<html>" CRLF
-"<head><title>501 Not Implemented</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>501 Not Implemented</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Not Implemented (501)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Not Implemented (501)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_502_page[] =
-"<html>" CRLF
-"<head><title>502 Bad Gateway</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>502 Bad Gateway</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Bad Gateway (502)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Bad Gateway (502)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_503_page[] =
-"<html>" CRLF
-"<head><title>503 Service Temporarily Unavailable</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>503 Service Temporarily Unavailable</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Service Temporarily Unavailable (503)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Service Temporarily Unavailable (503)</h3>" CRLF
 ;
 
 
 static char ngx_http_error_504_page[] =
-"<html>" CRLF
-"<head><title>504 Gateway Time-out</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>504 Gateway Time-out</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Gateway Time-out (504)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Gateway Time-out (504)</h3>" CRLF
 ;
 
 
@@ -330,10 +394,12 @@ static char ngx_http_error_505_page[] =
 
 
 static char ngx_http_error_507_page[] =
-"<html>" CRLF
-"<head><title>507 Insufficient Storage</title></head>" CRLF
-"<body>" CRLF
-"<center><h1>507 Insufficient Storage</h1></center>" CRLF
+"<html><head>" CRLF
+"<title>Insufficient Storage (507)</title>" CRLF
+"<style>*{margin:0;padding:0;}body{background:#eee;color:#fff;}div{background:#007878;padding:70px;margin:50px 0;}h3{color:#ddd;}</style>" CRLF
+"</head><body><div>" CRLF
+"<h1>Arvan Cloud</h1>" CRLF
+"<h3>Insufficient Storage (507)</h3>" CRLF
 ;
 
 
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index 042f406..45bfde5 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -560,6 +560,8 @@ ngx_http_upstream_init_request(ngx_http_request_t *r)
     ngx_http_core_loc_conf_t       *clcf;
     ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
     ngx_http_upstream_main_conf_t  *umcf;
+    ngx_str_t                      ar_ignore_headers_val;
+    ngx_str_t                      ar_cache_use_stale_val;
 
     if (r->aio) {
         return;
@@ -567,6 +569,82 @@ ngx_http_upstream_init_request(ngx_http_request_t *r)
 
     u = r->upstream;
 
+    if ((u->conf->ar_ignore_headers != NULL
+            && ngx_http_complex_value(r, u->conf->ar_ignore_headers, &ar_ignore_headers_val) == NGX_OK)) {
+          char* ar_char_ignore_headers_val;
+          ar_char_ignore_headers_val = ngx_pcalloc(r->pool, sizeof(u_char) * ar_ignore_headers_val.len + 1);
+          ngx_memcpy(ar_char_ignore_headers_val, ar_ignore_headers_val.data, sizeof(u_char) * (ar_ignore_headers_val.len));
+          ar_char_ignore_headers_val[ar_ignore_headers_val.len] = 0;
+    	  char * pch;
+    	  pch = strtok (ar_char_ignore_headers_val, " ");
+    	  while (pch != NULL)
+    	  {
+
+      	    if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Redirect", 16) == 0){
+      	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT;
+      	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Expires", 15) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES;
+    	    }
+
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Expires", 7) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_EXPIRES;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Cache-Control", 13) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Set-Cookie", 10) == 0){
+     	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_SET_COOKIE;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Limit-Rate", 18) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Buffering", 17) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Charset", 15) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_XA_CHARSET;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Vary", 4) == 0){
+    	    	r->ar_ignore_headers_mask |=  NGX_HTTP_UPSTREAM_IGN_VARY;
+    	    }
+    	    pch = strtok (NULL, " ");
+    	  }
+    }
+
+    if ((u->conf->ar_cache_use_stale != NULL
+            && ngx_http_complex_value(r, u->conf->ar_cache_use_stale, &ar_cache_use_stale_val) == NGX_OK)) {
+  	    if(ngx_strncasecmp((u_char *)ar_cache_use_stale_val.data, (u_char *) "on", 2) == 0){
+            //some case will be commented
+			u->conf->cache_use_stale = NGX_HTTP_UPSTREAM_FT_ERROR |
+									   NGX_HTTP_UPSTREAM_FT_TIMEOUT |
+									   //NGX_HTTP_UPSTREAM_FT_INVALID_HEADER |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_500 |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_502 |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_503 |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_504 |
+									   //NGX_HTTP_UPSTREAM_FT_HTTP_403 |
+									   //NGX_HTTP_UPSTREAM_FT_HTTP_404 |
+									   NGX_HTTP_UPSTREAM_FT_UPDATING |
+									   //NGX_HTTP_UPSTREAM_FT_BUSY_LOCK |
+									   //NGX_HTTP_UPSTREAM_FT_MAX_WAITING |
+									   //NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT |
+									   NGX_HTTP_UPSTREAM_FT_NOLIVE;
+
+  	    }else {
+  	        u->conf->cache_use_stale = NGX_CONF_BITMASK_SET |
+  	                                   NGX_HTTP_UPSTREAM_FT_OFF;
+  	    }
+    }
+
 #if (NGX_HTTP_CACHE)
 
     if (u->conf->cache) {
@@ -1545,6 +1623,11 @@ ngx_http_upstream_connect(ngx_http_request_t *r, ngx_http_upstream_t *u)
         return;
     }
 
+    if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {
+        ngx_http_upstream_finalize_request(r, u, rc);
+        return;
+    }
+
     u->state->peer = u->peer.name;
 
     if (rc == NGX_BUSY) {
@@ -2556,8 +2639,7 @@ ngx_http_upstream_test_next(ngx_http_request_t *r, ngx_http_upstream_t *u)
         }
 
         if (valid == 0) {
-            valid = ngx_http_file_cache_valid(u->conf->cache_valid,
-                                              u->headers_in.status_n);
+            valid = ngx_http_file_cache_valid(r, u->conf->cache_valid, u->headers_in.status_n);
             if (valid) {
                 valid = now + valid;
             }
@@ -2641,8 +2723,8 @@ ngx_http_upstream_intercept_errors(ngx_http_request_t *r,
                     valid = r->cache->valid_sec;
 
                     if (valid == 0) {
-                        valid = ngx_http_file_cache_valid(u->conf->cache_valid,
-                                                          status);
+                        valid = ngx_http_file_cache_valid(r, u->conf->cache_valid, status);
+                        
                         if (valid) {
                             r->cache->valid_sec = ngx_time() + valid;
                         }
@@ -2730,61 +2812,60 @@ ngx_http_upstream_process_headers(ngx_http_request_t *r, ngx_http_upstream_t *u)
     umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);
 
     if (u->headers_in.x_accel_redirect
-        && !(u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT))
-    {
-        ngx_http_upstream_finalize_request(r, u, NGX_DECLINED);
+        && !(r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT)){
+    	        ngx_http_upstream_finalize_request(r, u, NGX_DECLINED);
 
-        part = &u->headers_in.headers.part;
-        h = part->elts;
+    	        part = &u->headers_in.headers.part;
+    	        h = part->elts;
 
-        for (i = 0; /* void */; i++) {
+    	        for (i = 0; /* void */; i++) {
 
-            if (i >= part->nelts) {
-                if (part->next == NULL) {
-                    break;
-                }
+    	            if (i >= part->nelts) {
+    	                if (part->next == NULL) {
+    	                    break;
+    	                }
 
-                part = part->next;
-                h = part->elts;
-                i = 0;
-            }
+    	                part = part->next;
+    	                h = part->elts;
+    	                i = 0;
+    	            }
 
-            hh = ngx_hash_find(&umcf->headers_in_hash, h[i].hash,
-                               h[i].lowcase_key, h[i].key.len);
+    	            hh = ngx_hash_find(&umcf->headers_in_hash, h[i].hash,
+    	                               h[i].lowcase_key, h[i].key.len);
 
-            if (hh && hh->redirect) {
-                if (hh->copy_handler(r, &h[i], hh->conf) != NGX_OK) {
-                    ngx_http_finalize_request(r,
-                                              NGX_HTTP_INTERNAL_SERVER_ERROR);
-                    return NGX_DONE;
-                }
-            }
-        }
+    	            if (hh && hh->redirect) {
+    	                if (hh->copy_handler(r, &h[i], hh->conf) != NGX_OK) {
+    	                    ngx_http_finalize_request(r,
+    	                                              NGX_HTTP_INTERNAL_SERVER_ERROR);
+    	                    return NGX_DONE;
+    	                }
+    	            }
+    	        }
 
-        uri = u->headers_in.x_accel_redirect->value;
+                uri = u->headers_in.x_accel_redirect->value;
 
-        if (uri.data[0] == '@') {
-            ngx_http_named_location(r, &uri);
+                if (uri.data[0] == '@') {
+                    ngx_http_named_location(r, &uri);
 
-        } else {
-            ngx_str_null(&args);
-            flags = NGX_HTTP_LOG_UNSAFE;
+                } else {
+                    ngx_str_null(&args);
+                    flags = NGX_HTTP_LOG_UNSAFE;
 
-            if (ngx_http_parse_unsafe_uri(r, &uri, &args, &flags) != NGX_OK) {
-                ngx_http_finalize_request(r, NGX_HTTP_NOT_FOUND);
-                return NGX_DONE;
-            }
+                    if (ngx_http_parse_unsafe_uri(r, &uri, &args, &flags) != NGX_OK) {
+                        ngx_http_finalize_request(r, NGX_HTTP_NOT_FOUND);
+                        return NGX_DONE;
+                    }
 
-            if (r->method != NGX_HTTP_HEAD) {
-                r->method = NGX_HTTP_GET;
-                r->method_name = ngx_http_core_get_method;
-            }
+                    if (r->method != NGX_HTTP_HEAD) {
+                        r->method = NGX_HTTP_GET;
+                        r->method_name = ngx_http_core_get_method;
+                    }
 
-            ngx_http_internal_redirect(r, &uri, &args);
-        }
+                    ngx_http_internal_redirect(r, &uri, &args);
+                }
 
-        ngx_http_finalize_request(r, NGX_DONE);
-        return NGX_DONE;
+                ngx_http_finalize_request(r, NGX_DONE);
+                return NGX_DONE;
     }
 
     part = &u->headers_in.headers.part;
@@ -3069,8 +3150,7 @@ ngx_http_upstream_send_response(ngx_http_request_t *r, ngx_http_upstream_t *u)
         valid = r->cache->valid_sec;
 
         if (valid == 0) {
-            valid = ngx_http_file_cache_valid(u->conf->cache_valid,
-                                              u->headers_in.status_n);
+            valid = ngx_http_file_cache_valid(r, u->conf->cache_valid, u->headers_in.status_n);
             if (valid) {
                 r->cache->valid_sec = now + valid;
             }
@@ -4398,7 +4478,7 @@ ngx_http_upstream_finalize_request(ngx_http_request_t *r,
             if (rc == NGX_HTTP_BAD_GATEWAY || rc == NGX_HTTP_GATEWAY_TIME_OUT) {
                 time_t  valid;
 
-                valid = ngx_http_file_cache_valid(u->conf->cache_valid, rc);
+                valid = ngx_http_file_cache_valid(r,u->conf->cache_valid, rc);
 
                 if (valid) {
                     r->cache->valid_sec = ngx_time() + valid;
@@ -4541,8 +4621,8 @@ ngx_http_upstream_process_set_cookie(ngx_http_request_t *r, ngx_table_elt_t *h,
     *ph = h;
 
 #if (NGX_HTTP_CACHE)
-    if (!(u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_SET_COOKIE)) {
-        u->cacheable = 0;
+    if (!(r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_SET_COOKIE)) {
+    	  u->cacheable = 0;
     }
 #endif
 
@@ -4580,8 +4660,8 @@ ngx_http_upstream_process_cache_control(ngx_http_request_t *r,
     u_char     *p, *start, *last;
     ngx_int_t   n;
 
-    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL) {
-        return NGX_OK;
+    if (r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL) {
+  	        return NGX_OK;
     }
 
     if (r->cache == NULL) {
@@ -4701,8 +4781,8 @@ ngx_http_upstream_process_expires(ngx_http_request_t *r, ngx_table_elt_t *h,
     {
     time_t  expires;
 
-    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_EXPIRES) {
-        return NGX_OK;
+    if (r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_EXPIRES) {
+    	return NGX_OK;
     }
 
     if (r->cache == NULL) {
@@ -4743,7 +4823,7 @@ ngx_http_upstream_process_accel_expires(ngx_http_request_t *r,
     size_t      len;
     ngx_int_t   n;
 
-    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES) {
+    if (r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES) {
         return NGX_OK;
     }
 
@@ -4796,8 +4876,8 @@ ngx_http_upstream_process_limit_rate(ngx_http_request_t *r, ngx_table_elt_t *h,
     u = r->upstream;
     u->headers_in.x_accel_limit_rate = h;
 
-    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE) {
-        return NGX_OK;
+    if (r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE ) {
+    	      return NGX_OK;
     }
 
     n = ngx_atoi(h->value.data, h->value.len);
@@ -4819,7 +4899,7 @@ ngx_http_upstream_process_buffering(ngx_http_request_t *r, ngx_table_elt_t *h,
 
     u = r->upstream;
 
-    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING) {
+    if ( r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING ){
         return NGX_OK;
     }
 
@@ -4852,8 +4932,8 @@ static ngx_int_t
 ngx_http_upstream_process_charset(ngx_http_request_t *r, ngx_table_elt_t *h,
     ngx_uint_t offset)
 {
-    if (r->upstream->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_CHARSET) {
-        return NGX_OK;
+    if (r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_XA_CHARSET) {
+    	        return NGX_OK;
     }
 
     r->headers_out.override_charset = &h->value;
@@ -4907,7 +4987,7 @@ ngx_http_upstream_process_vary(ngx_http_request_t *r,
 
 #if (NGX_HTTP_CACHE)
 
-    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_VARY) {
+    if (r->ar_ignore_headers_mask & NGX_HTTP_UPSTREAM_IGN_VARY) {
         return NGX_OK;
     }
 
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index 36213ad..afd0d84 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -167,7 +167,7 @@ typedef struct {
 
     ngx_bufs_t                       bufs;
 
-    ngx_uint_t                       ignore_headers;
+    ngx_http_complex_value_t         *ar_ignore_headers;
     ngx_uint_t                       next_upstream;
     ngx_uint_t                       store_access;
     ngx_uint_t                       next_upstream_tries;
@@ -196,6 +196,7 @@ typedef struct {
 
     ngx_uint_t                       cache_min_uses;
     ngx_uint_t                       cache_use_stale;
+    ngx_http_complex_value_t         *ar_cache_use_stale;
     ngx_uint_t                       cache_methods;
 
     off_t                            cache_max_range_offset;
@@ -437,6 +444,7 @@ extern ngx_module_t        ngx_http_upstream_module;
 extern ngx_conf_bitmask_t  ngx_http_upstream_cache_method_mask[];
 extern ngx_conf_bitmask_t  ngx_http_upstream_ignore_headers_masks[];
 
+#define HAVE_BALANCER_STATUS_CODE_PATCH
 
 #ifndef HAVE_BALANCER_STATUS_CODE_PATCH
 #define HAVE_BALANCER_STATUS_CODE_PATCH
diff --git a/src/os/unix/ngx_process_cycle.c b/src/os/unix/ngx_process_cycle.c
index d3760a7..5485f73 100644
--- a/src/os/unix/ngx_process_cycle.c
+++ b/src/os/unix/ngx_process_cycle.c
@@ -17,6 +17,8 @@ static void ngx_start_cache_manager_processes(ngx_cycle_t *cycle,
     ngx_uint_t respawn);
 static void ngx_start_privileged_agent_processes(ngx_cycle_t *cycle,
     ngx_uint_t respawn);
+static void ngx_start_privileged_agent_processes(ngx_cycle_t *cycle,
+    ngx_uint_t respawn);
 static void ngx_pass_open_channel(ngx_cycle_t *cycle, ngx_channel_t *ch);
 static void ngx_signal_worker_processes(ngx_cycle_t *cycle, int signo);
 static ngx_uint_t ngx_reap_children(ngx_cycle_t *cycle);
@@ -27,6 +29,7 @@ static void ngx_worker_process_exit(ngx_cycle_t *cycle);
 static void ngx_channel_handler(ngx_event_t *ev);
 static void ngx_cache_manager_process_cycle(ngx_cycle_t *cycle, void *data);
 static void ngx_privileged_agent_process_cycle(ngx_cycle_t *cycle, void *data);
+static void ngx_privileged_agent_process_cycle(ngx_cycle_t *cycle, void *data);
 static void ngx_cache_manager_process_handler(ngx_event_t *ev);
 static void ngx_cache_loader_process_handler(ngx_event_t *ev);
 
@@ -57,6 +60,8 @@ ngx_uint_t    ngx_restart;
 
 ngx_uint_t    ngx_is_privileged_agent;
 
+ngx_uint_t    ngx_is_privileged_agent;
+
 
 static u_char  master_process[] = "master process";
 
@@ -137,6 +142,7 @@ ngx_master_process_cycle(ngx_cycle_t *cycle)
                                NGX_PROCESS_RESPAWN);
     ngx_start_cache_manager_processes(cycle, 0);
     ngx_start_privileged_agent_processes(cycle, 0);
+    ngx_start_privileged_agent_processes(cycle, 0);
 
     ngx_new_binary = 0;
     delay = 0;