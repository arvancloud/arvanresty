---
 src/http/ngx_http_cache.h      |   4 +-
 src/http/ngx_http_file_cache.c | 115 ++++++++++++++++++++-------------
 src/http/ngx_http_upstream.c   |   8 +--
 3 files changed, 76 insertions(+), 51 deletions(-)

diff --git a/src/http/ngx_http_cache.h b/src/http/ngx_http_cache.h
index 83ea453a..e77d1af3 100644
--- a/src/http/ngx_http_cache.h
+++ b/src/http/ngx_http_cache.h
@@ -32,7 +32,7 @@
 
 typedef struct {
     ngx_uint_t                       status;
-    time_t                           valid;
+    ngx_http_complex_value_t         *valid;
 } ngx_http_cache_valid_t;
 
 
@@ -195,7 +195,7 @@ void ngx_http_file_cache_update(ngx_http_request_t *r, ngx_temp_file_t *tf);
 void ngx_http_file_cache_update_header(ngx_http_request_t *r);
 ngx_int_t ngx_http_cache_send(ngx_http_request_t *);
 void ngx_http_file_cache_free(ngx_http_cache_t *c, ngx_temp_file_t *tf);
-time_t ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status);
+time_t ngx_http_file_cache_valid(ngx_http_request_t *r, ngx_array_t *cache_valid, ngx_uint_t status);
 
 char *ngx_http_file_cache_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
diff --git a/src/http/ngx_http_file_cache.c b/src/http/ngx_http_file_cache.c
index 38c6f75e..fe5ded0c 100644
--- a/src/http/ngx_http_file_cache.c
+++ b/src/http/ngx_http_file_cache.c
@@ -2290,7 +2290,7 @@ ngx_http_file_cache_set_watermark(ngx_http_file_cache_t *cache)
 
 
 time_t
-ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status)
+ngx_http_file_cache_valid(ngx_http_request_t *r, ngx_array_t *cache_valid, ngx_uint_t status)
 {
     ngx_uint_t               i;
     ngx_http_cache_valid_t  *valid;
@@ -2302,12 +2302,33 @@ ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status)
     valid = cache_valid->elts;
     for (i = 0; i < cache_valid->nelts; i++) {
 
+    	ngx_str_t                 unparsed_valid_time;
+    	time_t                    valid_time;
+
         if (valid[i].status == 0) {
-            return valid[i].valid;
+            if (ngx_http_complex_value(r, valid[i].valid, &unparsed_valid_time) != NGX_OK) {
+                return 0;
+            }
+            valid_time = ngx_parse_time(&unparsed_valid_time, 1);
+            if (valid_time == (time_t) NGX_ERROR) {
+                ngx_log_error(NGX_LOG_EMERG, r->connection->log, 0,
+                                   "invalid time value \"%V\"", &unparsed_valid_time);
+                return 0;
+            }
+            return valid_time;
         }
 
         if (valid[i].status == status) {
-            return valid[i].valid;
+            if (ngx_http_complex_value(r, valid[i].valid, &unparsed_valid_time) != NGX_OK) {
+                return 0;
+            }
+            valid_time = ngx_parse_time(&unparsed_valid_time, 1);
+            if (valid_time == (time_t) NGX_ERROR) {
+                ngx_log_error(NGX_LOG_EMERG, r->connection->log, 0,
+                                   "invalid time value \"%V\"", &unparsed_valid_time);
+                return 0;
+            }
+            return valid_time;
         }
     }
 
@@ -2643,13 +2664,11 @@ ngx_http_file_cache_valid_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
 {
     char  *p = conf;
 
-    time_t                    valid;
-    ngx_str_t                *value;
-    ngx_int_t                 status;
-    ngx_uint_t                i, n;
-    ngx_array_t             **a;
-    ngx_http_cache_valid_t   *v;
-    static ngx_uint_t         statuses[] = { 200, 301, 302 };
+    ngx_str_t                   *value;
+    ngx_uint_t                  i, n, status;
+    ngx_array_t                 **a;
+    ngx_http_cache_valid_t      *v;
+    static ngx_uint_t           statuses[] = { 200, 301, 302 };
 
     a = (ngx_array_t **) (p + cmd->offset);
 
@@ -2662,53 +2681,59 @@ ngx_http_file_cache_valid_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
 
     value = cf->args->elts;
     n = cf->args->nelts - 1;
+	ngx_http_complex_value_t           *valid_cv;
+	ngx_http_compile_complex_value_t   valid_ccv;
 
-    valid = ngx_parse_time(&value[n], 1);
-    if (valid == (time_t) NGX_ERROR) {
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                           "invalid time value \"%V\"", &value[n]);
-        return NGX_CONF_ERROR;
-    }
+	valid_cv = malloc(sizeof(ngx_http_complex_value_t));
+	ngx_memzero(&valid_ccv, sizeof(ngx_http_compile_complex_value_t));
+	valid_ccv.cf = cf;
+	valid_ccv.value = &value[n];
+	valid_ccv.complex_value = valid_cv;
 
-    if (n == 1) {
+	if (ngx_http_compile_complex_value(&valid_ccv) != NGX_OK) {
+		return NGX_CONF_ERROR;
+	}
 
-        for (i = 0; i < 3; i++) {
-            v = ngx_array_push(*a);
-            if (v == NULL) {
-                return NGX_CONF_ERROR;
-            }
+	if (n == 1) {
 
-            v->status = statuses[i];
-            v->valid = valid;
-        }
+		for (i = 0; i < 3; i++) {
+			v = ngx_array_push(*a);
+			if (v == NULL) {
+				return NGX_CONF_ERROR;
+			}
 
-        return NGX_CONF_OK;
-    }
+			v->status  = statuses[i];
+			v->valid   = valid_cv;
 
-    for (i = 1; i < n; i++) {
+		}
 
-        if (ngx_strcmp(value[i].data, "any") == 0) {
+		return NGX_CONF_OK;
+	}
 
-            status = 0;
+	for (i = 1; i < n; i++) {
 
-        } else {
+		if (ngx_strcmp(value[i].data, "any") == 0) {
 
-            status = ngx_atoi(value[i].data, value[i].len);
-            if (status < 100 || status > 599) {
-                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                                   "invalid status \"%V\"", &value[i]);
-                return NGX_CONF_ERROR;
-            }
-        }
+			status = 0;
 
-        v = ngx_array_push(*a);
-        if (v == NULL) {
-            return NGX_CONF_ERROR;
-        }
+		} else {
 
-        v->status = status;
-        v->valid = valid;
-    }
+			status = ngx_atoi(value[i].data, value[i].len);
+			if (status < 100) {
+				ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+								   "invalid status \"%V\"", &value[i]);
+				return NGX_CONF_ERROR;
+			}
+		}
+
+		v = ngx_array_push(*a);
+		if (v == NULL) {
+			return NGX_CONF_ERROR;
+		}
+
+		v->status = status;
+		v->valid = valid_cv;
+	}
 
     return NGX_CONF_OK;
 }
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index 3fa86c8f..1ac1540a 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -2546,7 +2546,7 @@ ngx_http_upstream_test_next(ngx_http_request_t *r, ngx_http_upstream_t *u)
         }
 
         if (valid == 0) {
-            valid = ngx_http_file_cache_valid(u->conf->cache_valid,
+            valid = ngx_http_file_cache_valid(r, u->conf->cache_valid,
                                               u->headers_in.status_n);
             if (valid) {
                 valid = now + valid;
@@ -2631,7 +2631,7 @@ ngx_http_upstream_intercept_errors(ngx_http_request_t *r,
                     valid = r->cache->valid_sec;
 
                     if (valid == 0) {
-                        valid = ngx_http_file_cache_valid(u->conf->cache_valid,
+                        valid = ngx_http_file_cache_valid(r, u->conf->cache_valid,
                                                           status);
                         if (valid) {
                             r->cache->valid_sec = ngx_time() + valid;
@@ -3059,7 +3059,7 @@ ngx_http_upstream_send_response(ngx_http_request_t *r, ngx_http_upstream_t *u)
         valid = r->cache->valid_sec;
 
         if (valid == 0) {
-            valid = ngx_http_file_cache_valid(u->conf->cache_valid,
+            valid = ngx_http_file_cache_valid(r, u->conf->cache_valid,
                                               u->headers_in.status_n);
             if (valid) {
                 r->cache->valid_sec = now + valid;
@@ -4388,7 +4388,7 @@ ngx_http_upstream_finalize_request(ngx_http_request_t *r,
             if (rc == NGX_HTTP_BAD_GATEWAY || rc == NGX_HTTP_GATEWAY_TIME_OUT) {
                 time_t  valid;
 
-                valid = ngx_http_file_cache_valid(u->conf->cache_valid, rc);
+                valid = ngx_http_file_cache_valid(r, u->conf->cache_valid, rc);
 
                 if (valid) {
                     r->cache->valid_sec = ngx_time() + valid;
