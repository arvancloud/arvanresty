---
 src/http/modules/ngx_http_proxy_module.c |  6 +--
 src/http/ngx_http_upstream.c             | 53 ++++++++++++++++++++++++
 src/http/ngx_http_upstream.h             |  1 +
 3 files changed, 57 insertions(+), 3 deletions(-)

diff --git a/src/http/modules/ngx_http_proxy_module.c b/src/http/modules/ngx_http_proxy_module.c
index 1ffbf229..3d4fbebb 100644
--- a/src/http/modules/ngx_http_proxy_module.c
+++ b/src/http/modules/ngx_http_proxy_module.c
@@ -624,10 +624,10 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
 
     { ngx_string("proxy_ignore_headers"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
-      ngx_conf_set_bitmask_slot,
+	  ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_proxy_loc_conf_t, upstream.ignore_headers),
-      &ngx_http_upstream_ignore_headers_masks },
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.ar_ignore_headers),
+      NULL },
 
     { ngx_string("proxy_http_version"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index 0a8401b7..839a0f31 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -553,6 +553,7 @@ ngx_http_upstream_init_request(ngx_http_request_t *r)
     ngx_http_core_loc_conf_t       *clcf;
     ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
     ngx_http_upstream_main_conf_t  *umcf;
+    ngx_str_t                      ar_ignore_headers_val;
     ngx_str_t                      ar_cache_use_stale_val;
 
     if (r->aio) {
@@ -561,6 +562,58 @@ ngx_http_upstream_init_request(ngx_http_request_t *r)
 
     u = r->upstream;
 
+    if ((u->conf->ar_ignore_headers != NULL
+            && ngx_http_complex_value(r, u->conf->ar_ignore_headers, &ar_ignore_headers_val) == NGX_OK)) {
+          char* ar_char_ignore_headers_val;
+          ar_char_ignore_headers_val = ngx_pcalloc(r->pool, sizeof(u_char) * ar_ignore_headers_val.len + 1);
+          ngx_memcpy(ar_char_ignore_headers_val, ar_ignore_headers_val.data, sizeof(u_char) * (ar_ignore_headers_val.len));
+          ar_char_ignore_headers_val[ar_ignore_headers_val.len] = 0;
+    	  char * pch;
+    	  pch = strtok (ar_char_ignore_headers_val, " ");
+    	  while (pch != NULL)
+    	  {
+
+      	    if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Redirect", 16) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT;
+      	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Expires", 15) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES;
+    	    }
+
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Expires", 7) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_EXPIRES;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Cache-Control", 13) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Set-Cookie", 10) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_SET_COOKIE;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Limit-Rate", 18) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Buffering", 17) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "X-Accel-Charset", 15) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_XA_CHARSET;
+    	    }
+
+      	    else if(ngx_strncasecmp((u_char *)pch, (u_char *) "Vary", 4) == 0){
+      	    	u->conf->ignore_headers |=  NGX_HTTP_UPSTREAM_IGN_VARY;
+    	    }
+    	    pch = strtok (NULL, " ");
+    	  }
+    }
+
+
     if ((u->conf->ar_cache_use_stale != NULL
             && ngx_http_complex_value(r, u->conf->ar_cache_use_stale, &ar_cache_use_stale_val) == NGX_OK)) {
   	    if(ngx_strncasecmp((u_char *)ar_cache_use_stale_val.data, (u_char *) "on", 2) == 0){
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index e64e6815..f77e8048 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -168,6 +168,7 @@ typedef struct {
     ngx_bufs_t                       bufs;
 
     ngx_uint_t                       ignore_headers;
+    ngx_http_complex_value_t         *ar_ignore_headers;
     ngx_uint_t                       next_upstream;
     ngx_uint_t                       store_access;
     ngx_uint_t                       next_upstream_tries;
     