---
 src/http/modules/ngx_http_proxy_module.c | 23 +++++++++++----------
 src/http/ngx_http_upstream.c             | 26 ++++++++++++++++++++++++
 src/http/ngx_http_upstream.h             |  1 +
 3 files changed, 39 insertions(+), 11 deletions(-)

diff --git a/src/http/modules/ngx_http_proxy_module.c b/src/http/modules/ngx_http_proxy_module.c
index d6a89221..1ffbf229 100644
--- a/src/http/modules/ngx_http_proxy_module.c
+++ b/src/http/modules/ngx_http_proxy_module.c
@@ -510,10 +510,10 @@ static ngx_command_t  ngx_http_proxy_commands[] = {
 
     { ngx_string("proxy_cache_use_stale"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
-      ngx_conf_set_bitmask_slot,
+	  ngx_http_set_complex_value_slot,
       NGX_HTTP_LOC_CONF_OFFSET,
-      offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_use_stale),
-      &ngx_http_proxy_next_upstream_masks },
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.ar_cache_use_stale),
+      NULL },
 
     { ngx_string("proxy_cache_methods"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
@@ -3136,14 +3136,15 @@ ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                               (NGX_CONF_BITMASK_SET
                                |NGX_HTTP_UPSTREAM_FT_OFF));
 
-    if (conf->upstream.cache_use_stale & NGX_HTTP_UPSTREAM_FT_OFF) {
-        conf->upstream.cache_use_stale = NGX_CONF_BITMASK_SET
-                                         |NGX_HTTP_UPSTREAM_FT_OFF;
-    }
-
-    if (conf->upstream.cache_use_stale & NGX_HTTP_UPSTREAM_FT_ERROR) {
-        conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
-    }
+// we dont need this section
+//    if (conf->upstream.cache_use_stale & NGX_HTTP_UPSTREAM_FT_OFF) {
+//        conf->upstream.cache_use_stale = NGX_CONF_BITMASK_SET
+//                                         |NGX_HTTP_UPSTREAM_FT_OFF;
+//    }
+//
+//    if (conf->upstream.cache_use_stale & NGX_HTTP_UPSTREAM_FT_ERROR) {
+//        conf->upstream.cache_use_stale |= NGX_HTTP_UPSTREAM_FT_NOLIVE;
+//    }
 
     if (conf->upstream.cache_methods == 0) {
         conf->upstream.cache_methods = prev->upstream.cache_methods;
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index 1ac1540a..0a8401b7 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -553,6 +553,7 @@ ngx_http_upstream_init_request(ngx_http_request_t *r)
     ngx_http_core_loc_conf_t       *clcf;
     ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
     ngx_http_upstream_main_conf_t  *umcf;
+    ngx_str_t                      ar_cache_use_stale_val;
 
     if (r->aio) {
         return;
@@ -560,6 +561,31 @@ ngx_http_upstream_init_request(ngx_http_request_t *r)
 
     u = r->upstream;
 
+    if ((u->conf->ar_cache_use_stale != NULL
+            && ngx_http_complex_value(r, u->conf->ar_cache_use_stale, &ar_cache_use_stale_val) == NGX_OK)) {
+  	    if(ngx_strncasecmp((u_char *)ar_cache_use_stale_val.data, (u_char *) "on", 2) == 0){
+            //some case will be commented
+			u->conf->cache_use_stale = NGX_HTTP_UPSTREAM_FT_ERROR |
+									   NGX_HTTP_UPSTREAM_FT_TIMEOUT |
+									   //NGX_HTTP_UPSTREAM_FT_INVALID_HEADER |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_500 |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_502 |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_503 |
+									   NGX_HTTP_UPSTREAM_FT_HTTP_504 |
+									   //NGX_HTTP_UPSTREAM_FT_HTTP_403 |
+									   //NGX_HTTP_UPSTREAM_FT_HTTP_404 |
+									   NGX_HTTP_UPSTREAM_FT_UPDATING |
+									   //NGX_HTTP_UPSTREAM_FT_BUSY_LOCK |
+									   //NGX_HTTP_UPSTREAM_FT_MAX_WAITING |
+									   //NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT |
+									   NGX_HTTP_UPSTREAM_FT_NOLIVE;
+
+  	    }else {
+  	        u->conf->cache_use_stale = NGX_CONF_BITMASK_SET |
+  	                                   NGX_HTTP_UPSTREAM_FT_OFF;
+  	    }
+    }
+
 #if (NGX_HTTP_CACHE)
 
     if (u->conf->cache) {
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index af84e24b..e64e6815 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -196,6 +196,7 @@ typedef struct {
 
     ngx_uint_t                       cache_min_uses;
     ngx_uint_t                       cache_use_stale;
+    ngx_http_complex_value_t         *ar_cache_use_stale;
     ngx_uint_t                       cache_methods;
 
     off_t                            cache_max_range_offset;
     